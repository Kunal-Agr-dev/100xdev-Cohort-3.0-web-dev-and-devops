const express = require("express");
const { auth,JWT_SECRET} = require("./auth");
const {UserModel,TodoModel} = require("./db");
const mongoose = require("mongoose");
const jwt = require("jsonwebtoken");
const bcrypt = require('bcrypt');
const { z, coerce } = require("zod");

//connnecting the mongodb database
mongoose.connect("mongodb+srv://kunal:Dookie%401@cluster0.qsvqnpt.mongodb.net/test-2");

const app = express();
app.use(express.json());

app.post("/signup", async function(req, res) {
    try{
        //doing schema validation using zod
        const correctBody = z.object({
            email: z.string().min(5).max(100).email(),
            password: z.string().min(8).max(100).regex(/[A-Z]/).regex(/[a-z]/).regex(/[0-9]/),
            name: z.string().min(3).max(100)
        })
        const parseData = correctBody.safeParse(req.body); //safeparse returns a succes and a error

        if(!parseData.success){
            res.json({
                msg:"incorrect format",
                error:parseData.error       //this will show the specific error made by the user
            })
        }       
        
        const email = req.body.email;
        const password = req.body.password;
        const name = req.body.name;
        //bcrypting the password 
        const hashedpassword = await bcrypt.hash(password,5); //the second argument tells the no of salt rounds more the rounds more complex it will be for hacker to crack the password
    
        await UserModel.create({
            email: email,
            password: hashedpassword,
            name: name
        })
    
        res.json({
            msg:"You are logged in"
        }) 
    }catch(e){
        res.status(500).json({
            msg:"user already exists"
        })   
    }
    //this exception handelling prevents the server from crashing
});


app.post("/signin", async function(req, res) {
    const email = req.body.email;
    const password = req.body.password;

    const response = await UserModel.findOne({
        email:email
    })

    const matchedpassword = await bcrypt.compare(password,response.password);

    if(response && matchedpassword){
        const token = jwt.sign({
            id:response._id.toString() //this _id is automatically generated by the mongodb and is used to identify a user
        },JWT_SECRET);                 //the _id is a json object so we have to parse it to string using toString()
        res.json({
            token:token
        });
    }else{
        res.status(403).json({
            msg:"Incorrect credentials"
        });
    }
});


app.post("/todo",auth,async function(req, res) {
    const userId = req.userId;
    const title = req.body.title;
    const done = req.body.done;

    await TodoModel.create({
        userId:userId,
        title:title,
        done:done
    });

    res.json({
        msg: "Todo created"
    })
});


app.get("/todos",auth,async function(req, res) {
    const userId = req.userId;

    const todos = await TodoModel.find({
        userId
    })

    res.json({
        todos:todos
    })
});

app.listen(3000);